<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Database\Database;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Datetime\DrupalDateTime;


/**
 * Implements hook_form_FORM_ID_alter() for user_form().
 */
function samhsa_pep_password_form_user_form_alter(&$form, &$form_state) {

  // Add validation handler.
  $form['#validate'][] = '_password_validate';

  // Add submit handler.
  $form['actions']['submit']['#submit'][] = '_password_submit';

  // TEST - kill user session.
  //  $form['actions']['expire'] = [
  //    '#type' => 'submit',
  //    '#value' => t('Expire my password'),
  //    '#weight' => 21,
  //    '#submit' => ['_expire_password'],
  //  ];
}

function _expire_password(&$form, FormStateInterface &$form_state) {
  $account = $form_state->getFormObject()->getEntity();
  $oneYearAgo = \Drupal::time()->getRequestTime() - (60 * 60 * 24 * 365);
  $date = \Drupal::service('date.formatter')->format($oneYearAgo, 'custom', \Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface::DATETIME_STORAGE_FORMAT, \Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface::STORAGE_TIMEZONE);
  // date of last password change
  $account->set('field_last_password_reset', $date);
  // set expired flag
  $account->set('field_password_expiration', '1');
  $account->save();
  \Drupal::messenger()->addMessage('Password expired.');

  /*$myself = \Drupal::currentUser();
  if ($myself->id() != $account->id()) {
    $switch = new \Drupal\Core\Session\AccountSwitcher($myself);
    $switch->switchTo($account);
    $session_manager = \Drupal::service('session_manager');
    $session_manager->delete($account->id());
    $switch->switchBack($myself);
  }*/
}

/**
 * custom validation for our additional constraints
 *
 * @param                                      $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function _password_validate(&$form, FormStateInterface &$form_state)
{
  $current_pass = $form_state->getValue('current_pass');
  $new_pass = $form_state->getValue('pass');
  if ($new_pass == '') return;
  $roles    = $form_state->getValue('roles');
  //  drupal_set_message('roles: ' . implode(',', $roles));
  //  drupal_set_message('current: ' . $current_pass);
  //  drupal_set_message('new: ' . $new_pass);

  /* @var \Drupal\user\Entity\User */
  $user = $form_state->getFormObject()->getEntity();
  $uid  = $user->id();
  $myself = \Drupal::currentUser();
  $isAdminReset = ($myself->id() != $uid && $myself->hasPermission('administer users') ? TRUE : FALSE);
  $form_state->set('isAdminReset', $isAdminReset);
  $conf = \Drupal::config('samhsa_pep_password.settings');
  $validation_errors = [];

  // run through all enabled validations and check for compliance
  if ($conf->get('length_enforce')) {
    // test for password length
    $length_min  = $conf->get('length_min_user');
    if (NULL != $conf->get('admin_roles')) {
      // check if user is in one or more privileged roles
      $admin_roles = $conf->get('admin_roles');
      foreach ($roles as $role) {
        if (in_array($role, $admin_roles)) {
          // user is privileged so check for different length
          $length_min = $conf->get('length_min_admin');
          \Drupal::messenger()->addMessage("using privileged ($role) minimum length constraint: $length_min");
          break;
        }
      }
    }
    $validation_errors[] = _validate_length($new_pass, $length_min);
  }

  if ($conf->get('character_enforce')) {
    // test for password character class use
    $chars['upper']   = $conf->get('character_upper_min');
    $chars['lower']   = $conf->get('character_lower_min');
    $chars['numeric'] = $conf->get('character_numeric_min');
    $chars['special'] = $conf->get('character_special_min');
    foreach (_validate_characters($new_pass, $chars) as $error) {
      $validation_errors[] = $error;
    }
  }

  if ($conf->get('lifetime_min_enforce') && !$isAdminReset) {
    // test for minimum lifetime (only if setting our own password)
    $validation_errors[] = _validate_lifetime($conf->get('lifetime_min'),$form_state);
  }

  if ($conf->get('password_reuse_enforce')) {
    // test for password reuse
    $validation_errors[] = _validate_reuse($new_pass,$uid,$conf->get('password_reuse_count'));
  }

  if ($conf->get('password_pattern_enforce') && $current_pass != '') {
    // test for pattern reuse (only if we have the existing password unencrypted)
    $validation_errors[] = _validate_pattern($new_pass,$current_pass,$conf->get('password_pattern_yield'));
  }

  // enumerate and set any form errors
  $password_errors = array_filter($validation_errors);
  if (sizeof($password_errors)) {
    $form_state->setErrorByName('pass', t(implode('<br />', $password_errors)));
  }
}


/**
 * function _password_submit()
 *
 * submit handler to store new password in history table
 *
 * @param                                      $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function _password_submit(&$form, FormStateInterface &$form_state) {
  $current_pass = $form_state->getValue('current_pass');
  $new_pass     = $form_state->getValue('pass');
  $isUserReset  = $form_state->get('user_pass_reset');
  $isAdminReset = $form_state->get('isAdminReset');
  //  drupal_set_message("userReset: $isUserReset, adminReset: $isAdminReset");
  /* @var \Drupal\user\Entity\User */
  $user = $form_state->getFormObject()->getEntity();
  $uid  = $user->id();

  // Update if both current and new password fields are filled out
  if ($uid && ($current_pass || $isUserReset) && $new_pass) {
    $date = \Drupal::service('date.formatter')->format(\Drupal::time()->getRequestTime(), 'custom', \Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface::DATETIME_STORAGE_FORMAT, \Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface::STORAGE_TIMEZONE);
    // date of this password change
    $user->set('field_last_password_reset', $date);
    // clear expired flag (in case set)
    $user->set('field_password_expiration', '0');
    $user->save();
  }

  else if ($uid && $isAdminReset && $new_pass) {
    // Administrator has reset the password so pre-expire and set
    // date of last change far back so user can make immediate change
    $oneYearAgo = \Drupal::time()->getRequestTime() - (60 * 60 * 24 * 365);
    //$oneDayAgo = \Drupal::time()->getRequestTime() - (60 * 60 * 24);
    $date = \Drupal::service('date.formatter')->format($oneYearAgo, 'custom', \Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface::DATETIME_STORAGE_FORMAT, \Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface::STORAGE_TIMEZONE);
    // date of this password change
    $user->set('field_last_password_reset', $date);

    // set expired flag so that user must set a new password immediately after login
    //$user->set('field_password_expiration', '1');
    $user->save();
  }
}

/**
 * function _validate_pattern()
 *
 * compare old and new passwords for patterns of re-use
 *
 * @param $new_pass
 * @param $old_pass
 * @param $max_yield
 * @return stringerror messages, if any
 */
function _validate_pattern($new_pass,$old_pass,$max_yield) {
  $p1       = str_split($old_pass);
  $p2       = str_split($new_pass);
  $matches  = 0;
  $checks   = 0;
  foreach ($p1 as $idx=>$char) {
    if (!isset($p2[$idx])) break;
    $checks++;
    if ($char == $p2[$idx]) $matches++;
  }

  $yield = (round($matches / $checks, 2) * 100);
  //drupal_set_message("$num_chars length, $checks checks, $matches matches, max: $max_yield, yield: $yield");
  // drupal_set_message("pattern yield: $yield%");
  return ($yield > $max_yield ? 'New password is too similar to existing password (' . $yield . '%)' : '');
}

/**
 * function _validate_lifetime()
 *
 * Test for minimum password age
 *
 * @param $min age in hours
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @return string error messages, if any
 */
function _validate_lifetime($age_min, FormStateInterface $form_state) {
  // field_last_password_reset should have at least a default value
  // set on module install, but test just in case
  /* @var Drupal\Core\Datetime\DrupalDateTime */
  $field_last_password_reset = $form_state->getValue('field_last_password_reset');
  if (isset($field_last_password_reset[0]['value']) && $field_last_password_reset[0]['value'] instanceof DrupalDateTime) {
    // DateTimes are stored in the database in UTC zone
    $last_reset = $field_last_password_reset[0]['value'];

    // set now time to UTC for comparison
    $now = new DrupalDateTime();
    $now->setTimezone($last_reset->getTimezone());
    $age = $last_reset->diff($now);
    $age_days = intval($age->format('%a'));

    //$nowDb  = $now->format('Y-m-d H:i:s') . ' (' . $now->getTimezone()->getName() . ')';
    //$lastDb = $last_reset->format('Y-m-d H:i:s') . ' (' . $last_reset->getTimezone()->getName() . ')';
    //$ageDb  = $age->format('%a day(s), %h:%i:%S');
    //    $msg    = new \Drupal\Core\StringTranslation\TranslatableMarkup(
    //"last: $lastDb<br />
    //now: $nowDb<br />
    //age: $ageDb");
    //    drupal_set_message($msg);

    if ($age_days < $age_min) {
      return "Passwords may not be changed more than once in $age_min day" . ($age_min > 1 ? 's' : '');
    }
  }
  return '';
}

/**
 * function _validate_length()
 *
 * Test for minimum number of all characters
 *
 * @param $password user's new password
 * @param $min minimum password length
 * @return string error messages, if any
 */
function _validate_length($password, $min) {
  // drupal_set_message("password length: " . strlen($password));
  if (strlen($password) < $min) {
    return "Password must be $min characters minimum";
  }
  return '';
}

/**
 * function _validate_characters()
 *
 * Test for minimum use of all required character classes
 *
 * @param $password user's new password
 * @return array error messages, if any
 */
function _validate_characters($password,$chars) {
  $character_distribution = count_chars($password);
  $min_u = $chars['upper'];
  $min_l = $chars['lower'];
  $min_n = $chars['numeric'];
  $min_s = $chars['special'];
  $count_upper   = 0;
  $count_lower   = 0;
  $count_numeric = 0;
  $count_special = 0;

  foreach ($character_distribution as $i => $val) {
    if ($val) {
      $char = chr($i);
      if (is_numeric($char)) {
        $count_numeric++;
      }
      else {
        if (ctype_upper($char)) {
          $count_upper++;
        }
        else {
          if (ctype_lower($char)) {
            $count_lower++;
          }
          else {
            $count_special++;
          }
        }
      }
    }
  }

  $errors = [];
  if ($count_upper < $min_u) {
    $errors[] = "Password must contain at least $min_u Uppercase character" . ($min_u > 1 ? 's' : '');
  }
  if ($count_lower < $min_l) {
    $errors[] = "Password must contain at least $min_l Lowercase character" . ($min_l > 1 ? 's' : '');
  }
  if ($count_numeric < $min_n) {
    $errors[] = "Password must contain at least $min_n Number" . ($min_n > 1 ? 's' : '');
  }
  if ($count_special < $min_s) {
    $errors[] = "Password must contain at least $min_s non-alphanumeric character" . ($min_s > 1 ? 's' : '');
  }
  return $errors;
}

/**
 * function _validate_reuse()
 *
 * Retrieve $max most recent passwords and test if new password matches any.
 *
 * @param $password user's new password
 * @param $uid
 * @param $max
 * @return string  error message, if any reuses found
 */
function _validate_reuse($password,$uid,$max)
{
  // Query for users hashes.
  $hashes = Database::getConnection()->select('samhsa_pep_password_history', 'pph')
    ->fields('pph', ['pass_hash', 'id', 'uid'])
    ->condition('uid', $uid)
    ->orderBy('timestamp', 'DESC')
    ->range(0, $max)
    ->execute()
    ->fetchAll();

  $passwordService = \Drupal::service('password');
  $repeats = 0;
  foreach ($hashes as $hash) {
    $msg = '(' . $hash->id . ', ' . $hash->uid . ') ' . $hash->pass_hash . ' <> ' . $password;
    if ($passwordService->check($password, $hash->pass_hash)) {
      $repeats++;
    }
  }
  return ($repeats > 0 ? "You may not reuse your $max most recent passwords." : '');
}

/**
 * Implements hook_user_update().
 */
function samhsa_pep_password_user_update(AccountInterface $account) {
  _samhsa_pep_password_insert_password_hash($account);
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function samhsa_pep_password_user_presave(Drupal\Core\Entity\EntityInterface $entity) {
  $path_info = \Drupal::request()->getPathInfo();
  // Is this an user registering operation?
  if ($path_info == '/user/register') {
    // Set date of last password resetting to Unix timestamp zero.
    //$entity->set('field_last_password_reset', '1970-01-01T00:00:00');
  }
}

/**
 * Get hashed password and insert it into the history table.
 *
 * @param \Drupal\Core\Session\AccountInterface $account
 *   The current user account.
 */
function _samhsa_pep_password_insert_password_hash(AccountInterface $account) {
  if (empty($_POST['pass']['pass1']) || empty($_POST['pass']['pass2']) || !empty($_POST['pass_logged'])) {
    return;
  }
  $connection = Database::getConnection();
  $values = [
    $account->id(),
    $account->getPassword(),
    \Drupal::time()->getRequestTime(),
  ];
  $rows = $connection->insert('samhsa_pep_password_history', ['return' => Database::RETURN_AFFECTED])
    ->fields(['uid', 'pass_hash', 'timestamp'], $values)
    ->execute();

  // set flag so we don't double log as hook_user_update() is called 2x.
  $_POST['pass_logged'] = TRUE;
}

/**
 * Implements hook_user_delete().
 *
 * Remove all history when a user is deleted
 */
function samhsa_pep_password_user_delete($account) {
  \Drupal::database()->delete('samhsa_pep_password_history')
    ->condition('uid', $account->id())
    ->execute();
}



/**
 * Implements hook_cron().
 *
 * Looks for expired passwords and updates the expiration based on the policy
 * assigned.
 */
function samhsa_pep_password_cron() {
  $conf = \Drupal::config('samhsa_pep_password.settings');
  $msg = 'lifetime_max_enforce: ' . $conf->get('lifetime_max_enforce') . '<br />';
  if ($conf->get('lifetime_max_enforce')) {
    $current_time = \Drupal::time()->getRequestTime();
    $lifetime_max = $conf->get('lifetime_max');
    $expire_timestamp = strtotime('-' . $lifetime_max . ' days', $current_time);
    $expire_date = \Drupal::service('date.formatter')->format($expire_timestamp, 'custom', \Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface::DATETIME_STORAGE_FORMAT, \Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface::STORAGE_TIMEZONE);
    $msg .= 'Expiring passwords with ' . $lifetime_max . ' days threshold: ' . $expire_date . '<br />';

    // Configurable limit to users per policy per run, to prevent OOM errors.
    $threshold = $conf->get('cron_threshold');

    // Get list of users based on conditionals from above.
    $query = \Drupal::entityQuery('user')
      ->condition('status', 1)
      ->condition('field_password_expiration', 0)
      ->condition('field_last_password_reset', $expire_date, '<=')
      ->condition('uid', 0, '>')
      ->range(0, $threshold);

    $valid_list = $query->execute();

    // Load User Objects.
    $users = \Drupal::entityTypeManager()
      ->getStorage('user')
      ->loadMultiple($valid_list);

    // Expire passwords.
    /** @var \Drupal\user\UserInterface $user */
    foreach ($users as $user) {
      $last_password_reset = $user->get('field_last_password_reset')->getValue()[0]['value'];
      $msg .= '<br />expiring password for ' . $user->getAccountName() . ' (' . $user->id() . ') last reset: ' . $last_password_reset;
      $user->set('field_password_expiration', '1');
      $user->save();
    }
  }
  else {
    $msg .= 'Not set to run';
  }
  \Drupal::logger('samhsa_pep_password')->notice($msg);
}
