<?php

/**
 * @file
 * Contains jbs_commerce_over_the_max_limit.module.
 */

use Drupal\Component\Utility\Xss;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\commerce\Context;
use Drupal\commerce\PurchasableEntityInterface;
use Drupal\commerce\Response\NeedsRedirectException;
use Drupal\commerce_order\Entity\Order;
use Drupal\commerce_order\Entity\OrderInterface;
use Drupal\commerce_product\Entity\Product;
use Drupal\commerce_product\Entity\ProductVariation;
use Drupal\commerce_product\Entity\ProductVariationInterface;
use Drupal\views\Form\ViewsForm;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_help()
 */
function jbs_commerce_over_the_max_limit_help($route_name, RouteMatchInterface $route_match) {
  $output = '';
  switch ($route_name) {
    // Main module help for the jbs_commerce_extended_log module.
    case 'help.page.jbs_commerce_extended_log':
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Extends the functionality of the commerce logging system') . '</p>';

    default:
  }

  return $output;
}

/**
 * Implements hook_entity_presave().
 */
function jbs_commerce_over_the_max_limit_presave(EntityInterface $entity): void {
  // Check changes in the Order.
  if ($entity instanceof OrderInterface) {
    $transition_states = _jbs_commerce_over_the_max_limit_get_state_transition($entity);
    // If Order is transitioning states, no custom log is necessary.
    // That's because Commerce takes care of that.
    if ($transition_states->from !== 'draft' && !$transition_states->trasitioning) {

    }
  }
}

/**
 * Gets the order object to which a profile belongs.
 *
 * @param int $profile_id
 *   The id of the profile.
 *
 * @return Drupal\commerce_order\Entity\Order
 *   Order object.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function _jbs_commerce_over_the_max_limit_get_order_from_profile($profile_id): Order {
  $results = \Drupal::entityTypeManager()
    ->getStorage('commerce_order')
    ->loadByProperties(['billing_profile__target_id' => $profile_id]);
  return array_shift($results);
}

/**
 * Gets the original and new state of the transition.
 *
 * @param \Drupal\commerce_order\Entity\Order $order
 *   Order object.
 *
 * @return object
 *   The original state;
 *   The new state;
 *   The original and new state of the transition, formatted as "from-to".
 */
function _jbs_commerce_over_the_max_limit_get_state_transition(Order $order): stdClass {
  $result = new stdClass();
  $state = $order->getState();
  $result->from = $state->getOriginalId();
  $result->to = $state->getString();
  $result->fromTo = sprintf('%s-%s', $result->from, $result->to);
  $result->trasitioning = ($result->from == $result->to) ? FALSE : TRUE;
  return $result;
}

/**
 * Implements hook_entity_presave().
 */
function jbs_commerce_over_the_max_limit_commerce_order_presave(EntityInterface $entity): void {
  /* when order is completed
   * check if at least one item is over the max limit
   * set order type to bulk
   */
  $original = $entity->original;
  $state_original = '';
  if (isset($original)) {
    $state_original = $original->get('state')->value;
  }
  // Only set onhold state (is bulk) when order first gets created.
  // For internally created oders.
  if (($entity->get('checkout_step')->value === 'complete' && $state_original === "draft") ||
    ($entity->get('checkout_step')->value == NULL && $state_original === "draft" && $entity->getState()->value === "pending")) {
    $isbulk = \Drupal::service('jbs_commerce_over_the_max_limit.maxlimit_util_functions')
      ->isOrderBulk($entity);
    $order_type = $isbulk ? 'samhsa_publication_ob' : 'default';
    $entity->get('type')->__set('target_id', $order_type);
    $state = $isbulk ? 'onhold' : 'pending';
    $entity->set('state', $state);
  }
}

/**
 * Implements hook_entity_presave().
 */
function jbs_commerce_over_the_max_limit_commerce_order_item_presave(EntityInterface $entity): void {
  /* when order is completed
   * check if at order item is over the max limit
   * mark commerce order item as over the limit
   */
  $item = $entity;
  $order = $entity->getOrder();
  // Only set over the limit when order first gets created.
  if ($order) {
    $state = $order->getState()->getValue()['value'];
    $entity->set('field_requested_quantity', $item->getQuantity());
    $over_the_limit = $entity->get('field_is_over_the_limit')->value;
    $isItemOverTheLimit = \Drupal::service('jbs_commerce_over_the_max_limit.maxlimit_util_functions')
      ->isItemOverTheMaxLimit($item);
    if (isset($over_the_limit)) {
      if ($over_the_limit != '1') {
        $entity->set('field_is_over_the_limit', $isItemOverTheLimit);
      }
      else {
        if (\Drupal::currentUser()
          ->hasPermission('overwite order item over the limit flag')) {
          $entity->set('field_is_over_the_limit', $isItemOverTheLimit);
        }
      }
    }
    else {
      $entity->set('field_is_over_the_limit', $isItemOverTheLimit);
    }
    if ($isItemOverTheLimit) {
      // SPO-201 - set permanent flag that this was at any time over the max limit.
      $entity->set('field_was_over_the_limit', $isItemOverTheLimit);
    }
  }
}

//
// COMMERCE STOCK ENFORMCEMENT INSPIRED FUNCTIONS
//

/**
 * Implements hook_form_alter().
 */
function jbs_commerce_over_the_max_limit_form_alter(&$form, FormStateInterface $form_state, $form_id): void {

  // Add to cart form.
  if (strpos($form_id, "commerce_order_item_add_to_cart_form") !== FALSE || strpos($form_id, "commerce_order_item_dc_ajax_add_cart_form") !== FALSE) {
    // Get the product variation.
    $selected_variation_id = $form_state->get('selected_variation');
    if (!empty($selected_variation_id)) {
      $selected_variation = ProductVariation::load($selected_variation_id);
    }
    else {
      /** @var \Drupal\commerce_product\Entity\ProductInterface $product */
      $product = $form_state->get('product');
      if (!empty($product)) {
        $selected_variation = $product->getDefaultVariation();
      }
    }

    if (isset($selected_variation) && ($selected_variation instanceof ProductVariationInterface)) {
      // Get the context.
      $context = jbs_commerce_over_the_max_limit_get_context($selected_variation);

      // Add a form validate needed for the add to cart action.
      $form['#validate'] = array_merge($form['#validate'], ['jbs_commerce_over_the_max_limit_add_to_cart_form_validate']);
      /** @var \Drupal\commerce\PurchasableEntityInterface $purchased_entity */
      $maxlimit_field = \Drupal::config('jbs_commerce_over_the_max_limit.settings')
        ->get('maxlimit_element', 'field_qty_max_order');
      $maxlimit = $product->get($maxlimit_field)->getValue()[0]['value'];
    }
  }

  // Cart page.
  if ($form_state->getFormObject() instanceof ViewsForm) {
    /** @var \Drupal\views\ViewExecutable $view */
    $view = reset($form_state->getBuildInfo()['args']);
    // Only add the Checkout button if the cart form view has order items.
    if ($view->storage->get('tag') === 'commerce_cart_form' && !empty($view->result)) {
      // Get the order ID from the view argument.
      $order_id = $view->args[0];
      /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
      $order = \Drupal::entityTypeManager()
        ->getStorage('commerce_order')
        ->load($order_id);
      // Force a check to display the stock state to the user.
      $request_method = \Drupal::requestStack()
        ->getCurrentRequest()
        ->getMethod();
      // If a GET e.g. not a submit/post.
      if ($request_method === 'GET') {
        // Perform a check to display the max limit to the user.
        // @todo CAREY  - Maybe need to change from True to False.
        jbs_commerce_over_the_max_limit_order_over_limit($order, TRUE);
      }
      // Add a form validate needed for the add to cart action.
      $form['#validate'] = array_merge($form['#validate'], ['jbs_commerce_over_the_max_limit_cart_order_item_views_form_validate']);
    }
  }

  // Checkout.
  if (strpos($form_id, "commerce_checkout_flow") !== FALSE && $form_state->getFormObject()
    ->getBaseFormId() === 'commerce_checkout_flow') {
    /** @var Drupal\Core\Form\FormInterface $form_object */
    $form_object = $form_state->getFormObject();
    /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
    $order = $form_object->getOrder();
    if ($form['#step_id'] !== 'complete' && jbs_commerce_over_the_max_limit_order_over_limit($order, TRUE)) {
      // // Redirect back to cart.
      $response = new RedirectResponse('/cart');
      $response->send();
    }
    // Add a submit validate.
    $form['#validate'] = array_merge($form['#validate'], ['jbs_commerce_over_the_max_limit_checkout_form_validate']);
  }
}

// UTILITY FUNCTIONS //////////

/**
 *
 * @param \Drupal\commerce\PurchasableEntityInterface $purchased_entity
 *
 * @return string
 */
function jbs_commerce_over_the_max_limit_get_maxlimit(PurchasableEntityInterface $purchased_entity): string {
  $product_id = $purchased_entity->get('product_id')
    ->getValue()[0]['target_id'];
  $product = Product::load($product_id);
  $maxlimit_field = \Drupal::config('jbs_commerce_over_the_max_limit.settings')
    ->get('maxlimit_element', 'field_qty_max_order');
  $maxlimit = $product->get($maxlimit_field)->getValue()[0]['value'];

  return $maxlimit;
}

/**
 * Check if the PurchasableEntity is over the limit.
 *
 * @param \Drupal\commerce\PurchasableEntityInterface $purchased_entity
 * @param int $quantity
 *   The quantity.
 * @param \Drupal\commerce\Context $context
 *   The context.
 *
 * @return bool
 *   True if entity is over the limit, FALSE otherwise.
 */
function jbs_commerce_over_the_max_limit_item_over_limit(PurchasableEntityInterface $purchased_entity, $quantity, Context $context): bool {
  if (empty($quantity)) {
    $quantity = 1;
  }
  $maxlimit = jbs_commerce_over_the_max_limit_get_maxlimit($purchased_entity);
  return ($quantity >= $maxlimit);
}

/**
 * Check if order is is over the limit.
 *
 * If order contains products that are is over the limit, then error messages
 * will be generated and the user redirected to the cart page.
 *
 * @param \Drupal\commerce_order\Entity\OrderInterface $order
 *   The order.
 * @param bool $show_warnings
 *   Whether to show warning or not.
 *
 * @return bool
 *   True if order is in stock, False if not.
 *
 * @todo Needs refactoring. This function does to much. Job is here to check
 * if all purchasable entities are in stock. Factor out the warnings part.
 */
function jbs_commerce_over_the_max_limit_order_over_limit(OrderInterface $order, $show_warnings = TRUE): bool {
  /** @var Drupal\commerce_store\Entity\StoreInterface $order_store */
  $order_store = $order->getStore();
  /** @var Drupal\user\UserInterface $order_user */
  $order_user = $order->getCustomer();
  $order_context = new Context($order_user, $order_store);

  $order_over_limit = FALSE;
  // Check each order item against the max limit.
  foreach ($order->getItems() as $id => $order_item) {
    $purchased_entity = $order_item->getPurchasedEntity();
    if (!$purchased_entity) {
      // Not every order item has a purchased entity.
      continue;
    }
    $name = $purchased_entity->getTitle();
    $qty = $order_item->getQuantity();
    $maxlimit = jbs_commerce_over_the_max_limit_get_maxlimit($purchased_entity);
    // @todo create public variable for this message
    if ($qty > $maxlimit) {
      if ($show_warnings) {
        $msg = t('Your order exceeds the maximum order limit. Please revise your order.');
        $message_text = Xss::filter($msg);
        \Drupal::messenger()->addError(t($message_text));
      }
      $order_over_limit = TRUE;
    }
  }
  return $order_over_limit;
}

/**
 * Get the context for the provided Purchasable Entity.
 *
 * @param \Drupal\commerce\PurchasableEntityInterface $entity
 *   The purchasable entity.
 *
 * @return \Drupal\commerce\Context
 *   The context.
 *
 * @see \Drupal\commerce_stock\ContextCreatorTrait::getContextDetails()
 * @see \Drupal\commerce_cart\Form\AddToCartForm::selectStore()
 */
function jbs_commerce_over_the_max_limit_get_context(PurchasableEntityInterface $entity): Context {
  // @todo think about using selectStore() in commerce_cart.module.
  $store_to_use = \Drupal::service('commerce_store.current_store')->getStore();
  $current_user = \Drupal::currentUser();
  // Make sure the current store is in the entity stores.
  $stores = $entity->getStores();
  $found = FALSE;
  // If we have a current store.
  if ($store_to_use) {
    // Make sure it is associated with the curent product.
    foreach ($stores as $store) {
      if ($store->id() == $store_to_use->id()) {
        $found = TRUE;
        break;
      }
    }
  }
  // If not found and we have stores associated with the product.
  if (!$found) {
    if (!empty($stores)) {
      // Get the first store the product is assigned to.
      $store_to_use = array_shift($stores);
    }
  }
  return new Context($current_user, $store_to_use);
}

/**
 * Get the quantity already ordered for the specified PurchasableEntity.
 *
 * @param \Drupal\commerce\PurchasableEntityInterface $entity
 *   The purchasable entity.
 * @param \Drupal\commerce\Context $context
 *   The context object.
 *
 * @return int
 *   The ordered quantity.
 */
function jbs_commerce_over_the_max_limit_get_ordered_quantity(PurchasableEntityInterface $entity, Context $context): int {
  // Get the already ordered quantity.
  $already_ordered = 0;
  // Get all the carts.
  $all_carts = \Drupal::service('commerce_cart.cart_provider')->getCarts();
  // Cycle all the carts to get the total stock already ordered.
  // It is unlikely that a product will be in more then one cart, but it is
  // probably safer to check.
  foreach ($all_carts as $cart) {
    foreach ($cart->getItems() as $order_item) {
      $purchased_entity = $order_item->getPurchasedEntity();
      if ($purchased_entity && ($purchased_entity->id() == $entity->id())) {
        $already_ordered += $order_item->getQuantity();
      }
    }
  }
  return $already_ordered;
}

// VALIDATION FUNCTIONS ////////

/**
 * Validates the add to cart form submit.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function jbs_commerce_over_the_max_limit_add_to_cart_form_validate(array $form, FormStateInterface $form_state): void {
  // Get add to cart quantity.
  $values = $form_state->getValues();
  if (isset($values['quantity'])) {
    $quantity = $values['quantity'][0]['value'];
  }
  else {
    $quantity = 1;
  }

  // Load the product variation.
  if (isset($values['purchased_entity'][0]['variation'])) {
    $variation_id = $values['purchased_entity'][0]['variation'];
    /** @var \Drupal\commerce\PurchasableEntityInterface $purchased_entity */
    $purchased_entity = ProductVariation::load($variation_id);
  }
  else {
    $purchased_entity = ProductVariation::load($values['purchased_entity'][0]['target_id']);
  }

  $context = jbs_commerce_over_the_max_limit_get_context($purchased_entity);
  $name = $purchased_entity->getTitle();
  // Get the available stock level.
  $maxlimit = jbs_commerce_over_the_max_limit_get_maxlimit($purchased_entity);
  // Get the already ordered quantity.
  $already_ordered = jbs_commerce_over_the_max_limit_get_ordered_quantity($purchased_entity, $context);
  $total_requested = $already_ordered + $quantity;
  if ($total_requested <= $maxlimit) {
    return;
  }

  // https://jira.icfwebservices.com/browse/PEP-527 - 20200719 - CDH.
  $msg = t('Your order exceeds the maximum order limit. Please revise your order.');
  $message_text = Xss::filter($msg);
  $message = t($message_text);
  $form_state->setError($form['quantity']['widget'][0]['value'], $message);
}

// CART PAGE FORM SUBMIT VALIDATION ///.

/**
 * Validate the cart page submit.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 */
function jbs_commerce_over_the_max_limit_cart_order_item_views_form_validate(array $form, FormStateInterface $form_state): void {
  $triggering_element = $form_state->getTriggeringElement();
  // If triggered by a line item delete.
  if (isset($triggering_element['#remove_order_item']) && $triggering_element['#remove_order_item']) {
    // No need to validate.
    return;
  }

  $values = $form_state->getValues();
  if (isset($values['edit_quantity'])) {
    $quantities = $values['edit_quantity'];
  }
  else {
    $quantities = [];
  }

  /** @var \Drupal\views\ViewExecutable $view */
  $view = reset($form_state->getBuildInfo()['args']);
  // Get the order ID from the view argument.
  $order_id = $view->argument['order_id']->value[0];
  /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
  $order = \Drupal::entityTypeManager()
    ->getStorage('commerce_order')
    ->load($order_id);

  foreach ($order->getItems() as $id => $order_item) {
    $purchased_entity = $order_item->getPurchasedEntity();
    if (!$purchased_entity) {
      // Not every order item has a purchased entity.
      continue;
    }
    $name = $purchased_entity->getTitle();
    $label = $order_item->getTitle();
    if (isset($quantities) && isset($quantities[$id])) {
      $qty = $quantities[$id];
    }
    else {
      $qty = 1;
    }
    $context = jbs_commerce_over_the_max_limit_get_context($purchased_entity);
    $maxlimit = jbs_commerce_over_the_max_limit_get_maxlimit($purchased_entity);
    if ($qty > $maxlimit) {
      $msg = t('Your order exceeds the maximum order limit. Please revise your order.');
      $message_text = Xss::filter($msg);
      $form_state->setError($form['edit_quantity'][$id], t($message_text));
    }
  }
}

// CHECKOUT FORM SUBMIT VALIDATION ///.

/**
 * Validate the checkout form submit.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @throws \Drupal\commerce\Response\NeedsRedirectException
 */
function jbs_commerce_over_the_max_limit_checkout_form_validate(array $form, FormStateInterface $form_state): void {
  $triggering_element = $form_state->getTriggeringElement();

  /** @var Drupal\Core\Form\FormInterface $form_object */
  $form_object = $form_state->getFormObject();

  /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
  $order = $form_object->getOrder();

  if (jbs_commerce_over_the_max_limit_order_over_limit($order, TRUE)) {
    $cart_page = Url::fromRoute('commerce_cart.page', [], ['absolute' => TRUE]);
    \Drupal::messenger()
      ->addError('One or more Items are over the max limit. Checkout canceled!');
    throw new NeedsRedirectException($cart_page->toString());
  }
}
