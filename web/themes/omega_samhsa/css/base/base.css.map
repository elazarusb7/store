{"version":3,"sources":["base/_base_forms.scss","config/variables/_var_utility.scss","config/variables/_var_colors.scss","../../../../../node_modules/compass-mixins/lib/compass/functions/_colors.scss","base.css","config/mixins/_mix_buttons.scss","base/_base_lists.scss","base/_base_media.scss","base/_base_tables.scss","base/_base_tags.scss","base/_base_typography.scss","config/mixins/_mix_links.scss","../../../../../node_modules/compass-mixins/lib/compass/typography/links/_link-colors.scss"],"names":[],"mappings":"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","file":"base.css","sourcesContent":["\r\n// Forms\r\n//==========================================================================\r\n\r\nform{\r\n  margin: $base-spacing 0;\r\n}\r\nfieldset {\r\n  background-color: transparent;\r\n  margin: 0 0 $small-spacing;\r\n  padding: $form-padding $form-padding*2;\r\n  border-radius: $base-border-radius;\r\n  border: $base-border;\r\n}\r\nlegend {\r\n  font-weight: $weight-bold;\r\n  margin-bottom: $small-spacing / 2;\r\n  padding: 0;\r\n}\r\nlabel {\r\n  cursor: pointer;\r\n  vertical-align: top;\r\n  display: inline-block;\r\n  font-weight: $weight-bold;\r\n  margin-bottom: $small-spacing / 2;\r\n}\r\n#{\r\n  $form-input-text;\r\n  },\r\nselect,\r\ntextarea {\r\n  display: block;\r\n  font-family: $base-font-family;\r\n  vertical-align: middle;\r\n  margin: 0 0 $small-spacing;\r\n  padding: $form-padding;\r\n  border-radius: $base-border-radius;\r\n  border: $base-border;\r\n  background-color: $form-field-bg;\r\n  box-sizing: border-box;\r\n  width: 100%;\r\n  &:hover {\r\n    border-color: shade($base-border-color, 20%);\r\n  }  \r\n  &:focus {\r\n    border-color: $form-focus-color;\r\n    box-shadow: $form-box-shadow-focus;\r\n    outline: none;\r\n  }  \r\n  &:disabled {\r\n    cursor: not-allowed;\r\n    color: $medium-gray;\r\n    &:hover {\r\n      border: $base-border;\r\n    }\r\n  }\r\n}\r\n#{\r\n  $form-input-text\r\n  } \r\n  {\r\n  line-height: $form-line-height; //line height is used to make the submit button the same height as inputs\r\n  padding: 0 $form-padding;\r\n}\r\ntextarea {\r\n  resize: vertical;\r\n}\r\n[type=\"checkbox\"],\r\n[type=\"radio\"] {\r\n  display: inline;\r\n  margin-right: $small-spacing / 2;\r\n}\r\n[type=\"file\"] {\r\n  margin-bottom: $small-spacing;\r\n  width: 100%;\r\n}\r\ninput[type=\"submit\"],\r\ninput[type=\"reset\"],\r\n.button,\r\nbutton:not(.toolbar-icon){\r\n  @include button();\r\n}\r\n\r\ninput[type=\"text\"],\r\ninput[type=\"password\"],\r\ninput[type=\"email\"],\r\ninput[type=\"search\"],\r\ninput[type=\"url\"],\r\ntextarea, \r\nselect { \r\n-webkit-border-radius: 0;\r\nborder-radius: 0;\r\n-webkit-box-shadow: none;\r\nbox-shadow: none;\r\n }\r\n \r\n","// Variables\r\n//==========================================================================\r\n\r\n//Warning from Omega\r\n//For a SCSS file in your theme to use the variables represented here, the line @import \"_omega-style-vars.scss\", \"_omega-default-style-vars.scss\"; must be at the top of the SCSS file.\r\n\r\n// You can add as many partials as needed and import them here\r\n// Be mindful of the order in which you import them\r\n//--------------------------------------------------------------------\r\n\r\n//Imports\r\n@import \"var_colors\";\r\n@import \"var_grids\";\r\n\r\n// Typography\r\n//-----------------------------------------------------\r\n$base-font-family: Tahoma, Verdana, Segoe, sans-serif;\r\n$heading-font-family: $base-font-family;\r\n\r\n// Font Sizes\r\n$base-font-size: 1.4rem;\r\n\r\n// Font Weights\r\n$weight-regular: normal;\r\n$weight-bold: bold;\r\n\r\n// Line height\r\n$base-line-height: 1.5;\r\n$heading-line-height: 1.2;\r\n\r\n// Spacing, padding and indexes\r\n//-----------------------------------------------------\r\n$base-spacing: $base-line-height * 1em;\r\n$small-spacing: $base-spacing / 2;\r\n$base-z-index: 0;\r\n\r\n//this is the padding for the mega menu\r\n$mega-menu-padding: 10px; \r\n\r\n//this is the padding for the buttons / list items in the side menu\r\n$side-menu-padding: 0.75em;  \r\n\r\n// Borders\r\n//-----------------------------------------------------\r\n$base-border-radius: 0;\r\n$base-border-color: $light-gray;\r\n$base-border: 1px solid $base-border-color;\r\n$megamenu-border: 1px solid $light-gray;\r\n\r\n// Forms\r\n//-----------------------------------------------------\r\n//Variables to define our field types\r\n$form-input-text: 'input[type=\"text\"], input[type=\"password\"], input[type=\"search\"], input[type=\"email\"], input[type=\"tel\"], input[type=\"url\"], input[type=\"number\"]';\r\n$form-input-buttons: 'input[type=\"submit\"], input[type=\"reset\"], input[type=\"button\"], button';\r\n$form-input-dates: 'input[type^=\"date\"], input[type=\"month\"], input[type=\"week\"], input[type=\"time\"]';\r\n$form-input-not-radio: 'input:not([type=\"radio\"]):not([type=\"checkbox\"])';\r\n\r\n$form-focus-color: #3b99fc;\r\n$form-box-shadow: inset 0 1px 3px rgba(#000, 0.06);\r\n$form-box-shadow-focus: 0 0 5px rgba($form-focus-color, 0.7);\r\n$form-field-bg: $white;\r\n$form-padding: $base-spacing / 3;\r\n$form-line-height: 2.2;\r\n\r\n// Transitions\r\n//-----------------------------------------------------\r\n$base-duration: 150ms;\r\n$base-timing: ease;\r\n","// Colors\r\n//New 2019 theme colors\r\n//===============================\r\n$white: #FFFFFF;\r\n$black: #000000;\r\n\r\n//grays\r\n$dark-gray: #4A4A4A;\r\n$dark-gray2: #5f636a;\r\n$medium-gray: #A3A7A9;\r\n$light-gray: #CDCDCD;\r\n$lighter-gray: #EEEEEE;\r\n\r\n//new SAMHSA colors\r\n$blue: #1F419A;\r\n$blue-gray: #1E384B;\r\n$teal: #1A6986;\r\n$red: #CD3835;\r\n$red-dark: #A82D2B;  \r\n\r\n// General colors (non-specific variable term)\r\n//-----------------------------------------------------\r\n\r\n// Font Colors\r\n$base-font-color: $dark-gray;\r\n$action-color: $blue;\r\n$action-color-hover: $red-dark;\r\n$light-font-color: $white;\r\n\r\n//Message Colors\r\n$message-color: $light-gray;\r\n$error-color: #C00;\r\n$warning-color: #FC0;\r\n$status-color: #3C0;\r\n\r\n// Background Colors\r\n$base-background-color: $white;\r\n$second-background-color: $white;\r\n$base-accent-color: $blue-gray;\r\n$highlight-color: #f6ecab;\r\n$megamenu-highlight-color: $blue-gray;\r\n$megamenu-gray: $lighter-gray;\r\n\r\n//Main menu color\r\n$mm-bg-1: $blue-gray;\r\n$mm-bg-2: $blue-gray;\r\n$mm-color: $white;\r\n$mm-icon-color: $white;\r\n\r\n//Side menu color\r\n$sm-bg-1: $red;\r\n$sm-bg-2: $light-gray;\r\n$sm-bg-3: $lighter-gray;\r\n$sm-bg-4: #DADADA;\r\n$sm-color-1: $white;\r\n$sm-color-2: $black;\r\n$sm-border: 1px solid $white;\r\n\r\n//Social Media colors\r\n$fb-color: #3A67B8;\r\n$tw-color: #00A2F9;\r\n$yt-color: #FF0000;\r\n$blog-color: #1C7491;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// \n// A partial implementation of the Ruby colors functions from Compass:\n// https://github.com/Compass/compass/blob/stable/core/lib/compass/core/sass_extensions/functions/colors.rb\n//\n\n// a genericized version of lighten/darken so that negative values can be used.\n@function adjust-lightness($color, $amount) {\n    @return adjust-color($color, $lightness: $amount);\n}\n\n// Scales a color's lightness by some percentage.\n// If the amount is negative, the color is scaled darker, if positive, it is scaled lighter.\n// This will never return a pure light or dark color unless the amount is 100%.\n@function scale-lightness($color, $amount) {\n    @return scale-color($color, $lightness: $amount);\n}\n\n// a genericized version of saturate/desaturate so that negative values can be used.\n@function adjust-saturation($color, $amount) {\n    @return adjust-color($color, $saturation: $amount);\n}\n\n// Scales a color's saturation by some percentage.\n// If the amount is negative, the color is desaturated, if positive, it is saturated.\n// This will never return a pure saturated or desaturated color unless the amount is 100%.\n@function scale-saturation($color, $amount) {\n    @return scale-color($color, $saturation: $amount);\n}\n\n@function shade($color, $percentage) {\n    @return mix(#000000, $color, $percentage);\n}\n\n@function tint($color, $percentage) {\n    @return mix(#ffffff, $color, $percentage);\n}\n\n","/*\nSCSS variables are information about icon's compiled state, stored under its original file name\n\n.icon-home {\n  width: $icon-home-width;\n}\n\nThe large array-like variables contain all information about a single icon\n$icon-home: x y offset_x offset_y width height total_width total_height image_path;\n\nAt the bottom of this section, we provide information about the spritesheet itself\n$spritesheet: width height image $spritesheet-sprites;\n*/\n/*\nThe provided mixins are intended to be used with the array-like variables\n\n.icon-home {\n  @include sprite-width($icon-home);\n}\n\n.icon-email {\n  @include sprite($icon-email);\n}\n*/\n/*\nThe `sprites` mixin generates identical output to the CSS template\n  but can be overridden inside of SCSS\n\n@include sprites($spritesheet-sprites);\n*/\nform {\n  margin: 1.5em 0; }\n\nfieldset {\n  background-color: transparent;\n  margin: 0 0 0.75em;\n  padding: 0.5em 1em;\n  border-radius: 0;\n  border: 1px solid #CDCDCD; }\n\nlegend {\n  font-weight: bold;\n  margin-bottom: 0.375em;\n  padding: 0; }\n\nlabel {\n  cursor: pointer;\n  vertical-align: top;\n  display: inline-block;\n  font-weight: bold;\n  margin-bottom: 0.375em; }\n\ninput[type=\"text\"], input[type=\"password\"], input[type=\"search\"], input[type=\"email\"], input[type=\"tel\"], input[type=\"url\"], input[type=\"number\"],\nselect,\ntextarea {\n  display: block;\n  font-family: Tahoma, Verdana, Segoe, sans-serif;\n  vertical-align: middle;\n  margin: 0 0 0.75em;\n  padding: 0.5em;\n  border-radius: 0;\n  border: 1px solid #CDCDCD;\n  background-color: #FFFFFF;\n  box-sizing: border-box;\n  width: 100%; }\n  input[type=\"text\"]:hover, input[type=\"password\"]:hover, input[type=\"search\"]:hover, input[type=\"email\"]:hover, input[type=\"tel\"]:hover, input[type=\"url\"]:hover, input[type=\"number\"]:hover,\n  select:hover,\n  textarea:hover {\n    border-color: #a4a4a4; }\n  input[type=\"text\"]:focus, input[type=\"password\"]:focus, input[type=\"search\"]:focus, input[type=\"email\"]:focus, input[type=\"tel\"]:focus, input[type=\"url\"]:focus, input[type=\"number\"]:focus,\n  select:focus,\n  textarea:focus {\n    border-color: #3b99fc;\n    box-shadow: 0 0 5px rgba(59, 153, 252, 0.7);\n    outline: none; }\n  input[type=\"text\"]:disabled, input[type=\"password\"]:disabled, input[type=\"search\"]:disabled, input[type=\"email\"]:disabled, input[type=\"tel\"]:disabled, input[type=\"url\"]:disabled, input[type=\"number\"]:disabled,\n  select:disabled,\n  textarea:disabled {\n    cursor: not-allowed;\n    color: #A3A7A9; }\n    input[type=\"text\"]:disabled:hover, input[type=\"password\"]:disabled:hover, input[type=\"search\"]:disabled:hover, input[type=\"email\"]:disabled:hover, input[type=\"tel\"]:disabled:hover, input[type=\"url\"]:disabled:hover, input[type=\"number\"]:disabled:hover,\n    select:disabled:hover,\n    textarea:disabled:hover {\n      border: 1px solid #CDCDCD; }\n\ninput[type=\"text\"], input[type=\"password\"], input[type=\"search\"], input[type=\"email\"], input[type=\"tel\"], input[type=\"url\"], input[type=\"number\"] {\n  line-height: 2.2;\n  padding: 0 0.5em; }\n\ntextarea {\n  resize: vertical; }\n\n[type=\"checkbox\"],\n[type=\"radio\"] {\n  display: inline;\n  margin-right: 0.375em; }\n\n[type=\"file\"] {\n  margin-bottom: 0.75em;\n  width: 100%; }\n\ninput[type=\"submit\"],\ninput[type=\"reset\"],\n.button,\nbutton:not(.toolbar-icon) {\n  appearance: none;\n  background-color: #1A6986;\n  border: 1px solid #1A6986;\n  border-radius: 0;\n  color: #FFFFFF;\n  cursor: pointer;\n  display: inline-block;\n  font-family: Tahoma, Verdana, Segoe, sans-serif;\n  font-weight: normal;\n  line-height: 2.2;\n  padding: 0 1em;\n  margin: 0 0.375em 0.375em 0;\n  text-align: center;\n  text-decoration: none;\n  user-select: none;\n  vertical-align: middle;\n  white-space: nowrap; }\n  input[type=\"submit\"]:hover, input[type=\"submit\"]:active, input[type=\"submit\"]:focus,\n  input[type=\"reset\"]:hover,\n  input[type=\"reset\"]:active,\n  input[type=\"reset\"]:focus,\n  .button:hover,\n  .button:active,\n  .button:focus,\n  button:not(.toolbar-icon):hover,\n  button:not(.toolbar-icon):active,\n  button:not(.toolbar-icon):focus {\n    background-color: #5f636a;\n    border: 1px solid #5f636a;\n    color: #FFFFFF; }\n  input[type=\"submit\"]:focus,\n  input[type=\"reset\"]:focus,\n  .button:focus,\n  button:not(.toolbar-icon):focus {\n    box-shadow: 0 0 5px rgba(59, 153, 252, 0.7); }\n  input[type=\"submit\"]:disabled,\n  input[type=\"reset\"]:disabled,\n  .button:disabled,\n  button:not(.toolbar-icon):disabled {\n    cursor: not-allowed;\n    opacity: 0.5; }\n    input[type=\"submit\"]:disabled:hover, input[type=\"submit\"]:disabled:active, input[type=\"submit\"]:disabled:focus,\n    input[type=\"reset\"]:disabled:hover,\n    input[type=\"reset\"]:disabled:active,\n    input[type=\"reset\"]:disabled:focus,\n    .button:disabled:hover,\n    .button:disabled:active,\n    .button:disabled:focus,\n    button:not(.toolbar-icon):disabled:hover,\n    button:not(.toolbar-icon):disabled:active,\n    button:not(.toolbar-icon):disabled:focus {\n      background-color: #5f636a; }\n\ninput[type=\"text\"],\ninput[type=\"password\"],\ninput[type=\"email\"],\ninput[type=\"search\"],\ninput[type=\"url\"],\ntextarea,\nselect {\n  -webkit-border-radius: 0;\n  border-radius: 0;\n  -webkit-box-shadow: none;\n  box-shadow: none; }\n\nul,\nol {\n  list-style-type: none;\n  margin: 0;\n  padding: 0; }\n\nli {\n  list-style-image: none;\n  list-style-type: none; }\n\ndl {\n  margin: 0; }\n\ndt {\n  font-weight: 600;\n  margin: 0; }\n\ndd {\n  margin: 0; }\n\nfigure {\n  margin: 0; }\n\nimg,\npicture {\n  margin: 0;\n  max-width: 100%;\n  height: auto; }\n\ntable {\n  border-collapse: collapse;\n  margin: 0.75em 0;\n  table-layout: auto;\n  width: 100% !important; }\n\nth,\ntd {\n  padding: 0.5em;\n  text-align: left;\n  background-color: transparent;\n  border: 1px solid #CDCDCD; }\n\nth {\n  font-weight: bold;\n  vertical-align: middle; }\n\ntd {\n  font-weight: normal;\n  vertical-align: top; }\n\ntbody tr:nth-child(2n+1) {\n  background-color: #EEEEEE; }\n\nth,\ntd {\n  border-color: #CDCDCD; }\n\nhtml {\n  box-sizing: border-box;\n  font-size: 62.5%;\n  min-height: 100%; }\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit; }\n\nbody {\n  min-height: 100%;\n  min-width: 320px;\n  background-color: #FFFFFF; }\n\nbody {\n  color: #4A4A4A;\n  font-family: Tahoma, Verdana, Segoe, sans-serif;\n  font-size: 1.4rem;\n  line-height: 1.5; }\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-family: Tahoma, Verdana, Segoe, sans-serif;\n  font-weight: bold;\n  line-height: 1.2;\n  margin: 1.5em 0 0.75em;\n  color: #1E384B; }\n\nh1 {\n  font-size: 2.4rem;\n  margin-top: 0; }\n\nh2 {\n  font-size: 2rem; }\n\nh3 {\n  font-size: 1.7rem; }\n\nh4 {\n  font-size: 1.6rem; }\n\nh5 {\n  font-size: 1.5rem; }\n\nh6 {\n  font-size: 1.5rem;\n  font-weight: normal; }\n\np {\n  margin: 0 0 0.75em; }\n\na {\n  transition: color 150ms ease; }\n  a:link, a:visited {\n    text-decoration: underline; }\n  a:hover, a:active, a:focus {\n    text-decoration: none; }\n\nstrong, b {\n  font-weight: bold; }\n\nhr {\n  border-bottom: 2px solid #1E384B;\n  border-left: 0;\n  border-right: 0;\n  border-top: 0;\n  margin: 1.5em 0; }\n\nblockquote {\n  margin: 0 0 1.5em 0.5em;\n  padding: 0 0 0 1em;\n  border-left: 5px solid #4A4A4A;\n  line-height: 1.4; }\n\na {\n  color: #1F419A; }\n  a:visited {\n    color: #1F419A; }\n  a:focus {\n    color: #A82D2B; }\n  a:hover {\n    color: #A82D2B; }\n  a:active {\n    color: #A82D2B; }\n\n@font-face {\n  font-family: 'samhsa-icons';\n  src: url(\"../../fonts/icomoon/samhsa-icons/samhsa-icons.eot?xd8hxr\");\n  src: url(\"../../fonts/icomoon/samhsa-icons/samhsa-icons.eot?xd8hxr#iefix\") format(\"embedded-opentype\"), url(\"../../fonts/icomoon/samhsa-icons/samhsa-icons.woff2?xd8hxr\") format(\"woff2\"), url(\"../../fonts/icomoon/samhsa-icons/samhsa-icons.ttf?xd8hxr\") format(\"truetype\"), url(\"../../fonts/icomoon/samhsa-icons/samhsa-icons.woff?xd8hxr\") format(\"woff\"), url(\"../../fonts/icomoon/samhsa-icons/samhsa-icons.svg?xd8hxr#samhsa-icon\") format(\"svg\");\n  font-weight: normal;\n  font-style: normal; }\n\n[class^=\"samhsa-icons-\"], [class*=\" samhsa-icons-\"] {\n  font-family: 'samhsa-icons' !important;\n  speak: none;\n  font-style: normal;\n  font-weight: normal;\n  font-variant: normal;\n  text-transform: none;\n  line-height: 1;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale; }\n\n/*# sourceMappingURL=data:application/json;charset=utf8;base64, */\n","// This \"should\" be the mixin for all buttons\r\n@mixin button(){\r\n  appearance: none;\r\n  //@include background-image(linear-gradient($Samsha_Grey_1, $blue-gray));\r\n  background-color: $teal;\r\n  border: 1px solid $teal;\r\n  border-radius: 0;\r\n  color: $white;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  font-family: $base-font-family;\r\n  font-weight: $weight-regular;\r\n  line-height: $form-line-height;\r\n  padding: 0 1em;\r\n  margin: 0 $small-spacing / 2 $small-spacing / 2 0;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  user-select: none;\r\n  vertical-align: middle;\r\n  white-space: nowrap;\r\n  &:hover,\r\n  &:active,\r\n  &:focus{\r\n    background-color: $dark-gray2;\r\n    border: 1px solid $dark-gray2;\r\n    color: $white;\r\n  }  \r\n  &:focus {\r\n    box-shadow: $form-box-shadow-focus;\r\n  }\r\n  &:disabled {\r\n    cursor: not-allowed;\r\n    opacity: 0.5;\r\n    &:hover,\r\n    &:active,\r\n    &:focus{\r\n      background-color: $dark-gray2;\r\n    }\r\n  }\r\n}\r\n","//Removing all default formatting for lists\r\n//------------------------------------------\r\nul,\r\nol {\r\n  list-style-type: none;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\nli{\r\n  list-style-image: none;\r\n  list-style-type: none;\r\n}\r\ndl {\r\n  margin: 0;\r\n}\r\ndt {\r\n  font-weight: 600;\r\n  margin: 0;\r\n}\r\ndd {\r\n  margin: 0;\r\n}\r\n\r\n","figure {\r\n  margin: 0;\r\n}\r\nimg,\r\npicture {\r\n  margin: 0;\r\n  max-width: 100%;\r\n  height: auto;\r\n}","// Tables\r\n//------------------------------------------\r\ntable {\r\n  border-collapse: collapse;\r\n  margin: $small-spacing 0;\r\n  table-layout: auto;\r\n  width: 100% !important;\r\n}\r\nth, \r\ntd {\r\n  padding: 0.5em;\r\n  text-align: left;\r\n  background-color: transparent;\r\n  border: $base-border;\r\n}\r\nth {\r\n  font-weight: $weight-bold;\r\n  vertical-align: middle;\r\n}\r\ntd {\r\n  font-weight: $weight-regular;\r\n  vertical-align: top;\r\n}\r\ntbody tr:nth-child(2n+1) {\r\n  background-color: $lighter-gray;\r\n}\r\nth, \r\ntd{\r\n  border-color: $base-border-color;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","html {\r\n  box-sizing: border-box;\r\n  font-size: 62.5%;\r\n  min-height: 100%;\r\n}\r\n*,\r\n*::before,\r\n*::after {\r\n  box-sizing: inherit;\r\n}\r\nbody{\r\n  min-height: 100%;\r\n  min-width: 320px;\r\n  background-color: $white;\r\n}\r\n\r\n","// Typography\r\n//==========================================================================\r\n\r\nbody {\r\n  color: $base-font-color;\r\n  font-family: $base-font-family;\r\n  font-size: $base-font-size;\r\n  line-height: $base-line-height;\r\n}\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nh5,\r\nh6 {\r\n  font-family: $heading-font-family;\r\n  font-weight: $weight-bold;\r\n  line-height: $heading-line-height;\r\n  margin: $base-spacing 0 $small-spacing;\r\n  color: $blue-gray;\r\n}\r\nh1{\r\n  font-size: 2.4rem;\r\n  margin-top: 0;\r\n}\r\nh2{\r\n  font-size: 2rem;\r\n}\r\nh3{\r\n  font-size: 1.7rem;\r\n}\r\nh4{\r\n  font-size: 1.6rem;\r\n}\r\nh5{\r\n  font-size: 1.5rem;\r\n}\r\nh6{\r\n  font-size: 1.5rem;\r\n  font-weight: $weight-regular;\r\n}\r\np {\r\n  margin: 0 0 $small-spacing;\r\n}\r\na {\r\n  transition: color $base-duration $base-timing;\r\n  @include hover-unstyled-link;\r\n}\r\nstrong, b{\r\n  font-weight: $weight-bold;\r\n}\r\nhr {\r\n  border-bottom: 2px solid $base-accent-color;\r\n  border-left: 0;\r\n  border-right: 0;\r\n  border-top: 0;\r\n  margin: $base-spacing 0;\r\n}\r\n\r\n\r\n//Blockquote\r\n//-----------------------------------\r\n\r\nblockquote{\r\n  margin: 0 0 $base-spacing 0.5em;\r\n  padding: 0 0 0 1em;\r\n  border-left: 5px solid $base-font-color;\r\n  line-height: 1.4;\r\n}\r\n\r\n// Links\r\n//------------------------------------------\r\n\r\na {\r\n  @include link-colors($action-color, $action-color-hover, $action-color-hover, $action-color, $action-color-hover);\r\n}\r\n\r\n\r\n// samhsa-icon font icons\r\n//==============================================\r\n\r\n// Create the font family\r\n//----------------------------------------------\r\n@font-face {\r\n  font-family: 'samhsa-icons';\r\n  src:  url('../../fonts/icomoon/samhsa-icons/samhsa-icons.eot?xd8hxr');\r\n  src:  url('../../fonts/icomoon/samhsa-icons/samhsa-icons.eot?xd8hxr#iefix') format('embedded-opentype'),\r\n    url('../../fonts/icomoon/samhsa-icons/samhsa-icons.woff2?xd8hxr') format('woff2'),\r\n    url('../../fonts/icomoon/samhsa-icons/samhsa-icons.ttf?xd8hxr') format('truetype'),\r\n    url('../../fonts/icomoon/samhsa-icons/samhsa-icons.woff?xd8hxr') format('woff'),\r\n    url('../../fonts/icomoon/samhsa-icons/samhsa-icons.svg?xd8hxr#samhsa-icon') format('svg');\r\n  font-weight: normal;\r\n  font-style: normal;\r\n}\r\n[class^=\"samhsa-icons-\"], [class*=\" samhsa-icons-\"] {\r\n  font-family: 'samhsa-icons' !important;\r\n  speak: none;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-variant: normal;\r\n  text-transform: none;\r\n  line-height: 1;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\n\r\n\r\n","// Buttons and Links\n//===============================================\n\n@mixin hover-unstyled-link(){\n  &:link,\n  &:visited{\n    text-decoration: underline;\n  }\n  &:hover,\n  &:active,\n  &:focus{\n    text-decoration: none;\n  }\n}\n\n","// Set all the colors for a link with one mixin call.\n// Order of arguments is:\n//\n// 1. normal\n// 2. hover\n// 3. active\n// 4. visited\n// 5. focus\n//\n// Those states not specified will inherit.\n// Mixin to an anchor link like so:\n//     a\n//       +link-colors(#00c, #0cc, #c0c, #ccc, #cc0)\n\n@mixin link-colors($normal, $hover: false, $active: false, $visited: false, $focus: false) {\n  color: $normal;\n  @if $visited {\n    &:visited {\n      color: $visited; } }\n  @if $focus {\n    &:focus {\n      color: $focus; } }\n  @if $hover {\n    &:hover {\n      color: $hover; } }\n  @if $active {\n    &:active {\n      color: $active; } } }\n"]}