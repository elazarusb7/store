# Build steps explained:
# * https://docs.tugboat.qa/building-a-preview/preview-deep-dive/how-previews-work/#the-build-process-explained
# * https://docs.tugboat.qa/building-a-preview/preview-deep-dive/how-previews-work/#why-build-phases-matter

# @todo: Remove all commmented/unneeded config once this is stable

services:

  # What to call the service hosting the site
  php:

    # Match versions used on prod: Minimum Apache 2.4.51, php 8.0.x
    image: tugboatqa/php:8.0-apache

    # Set this as the default service. This does a few things
    #   1. Clones the git repository into the service container
    #   2. Exposes port 80 to the Tugboat HTTP proxy
    #   3. Routes requests to the preview URL to this service
    default: true

    # Wait until the mysql service is done building
    depends: mysql

    # A set of commands to run while building this service
    commands:

      # Commands that set up the basic preview infrastructure. This is where we
      # install the tools that need to be present before building the site.
      # Building a "base preview" starts here and completes subsequent phases
      init:
        - apt update
        - apt install libzip-dev nodejs npm python
        - apt install libldb-dev libldap2-dev libxml2-dev
        - docker-php-ext-install zip opcache
        # Store specific
        - docker-php-ext-install soap bcmath xml

        ## Following 4 lines needed for webp to work
#        - apt install imagemagick
#        - apt-get install -y libmagickwand-dev --no-install-recommends
#        - pecl install imagick
#        - docker-php-ext-enable imagick

        # a2enmod for adding headers
        - a2enmod headers rewrite
        - npm install -g gulp-cli

        # Link the document root to the expected path. This example links /web
        # to the docroot
        - ln -snf "${TUGBOAT_ROOT}/web" $DOCROOT

        # Remove tugboat error log symlinks and replace with actual file
        - rm /var/log/apache2/error.log
        - touch /var/log/apache2/error.log

        # SAMHSA_STORE: Our own custom php tweaks
        - cp "${TUGBOAT_ROOT}/.tugboat/php.ini" /usr/local/etc/php/conf.d/samhsa_store.ini

        - composer install
        -
        # Link drush (before trying to use it
        - ln -s "${TUGBOAT_ROOT}/vendor/drush/drush/drush" /usr/local/bin/drush

        # Use the tugboat-specific Drupal settings
        - cp "${TUGBOAT_ROOT}/.tugboat/tugboat.settings.php" "${DOCROOT}/sites/default/settings.local.php"
        # We are using Drupal default services instead of our dev version with twig debugging
        - cp "${DOCROOT}/sites/default/services.yml"   "${DOCROOT}/sites/default/services.local.yml"

        # Make sure our file system is accessible
        - chgrp -R www-data "${DOCROOT}/sites/default/files"
        - find "${DOCROOT}/sites/default/files" -type d -exec chmod 2775 {} \;
        - find "${DOCROOT}/sites/default/files" -type f -exec chmod 0664 {} \;

      # Commands that import files, databases,  or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      # "refresh" starts here and completes subsequent phases
      update:

        # Fetch and import database
        - wget $SAMHSA_STORE_DB -O /tmp/database.sql.gz
        - zcat /tmp/database.sql.gz | drush -y -r $DOCROOT sql-cli
        # Adding a cache rebuild here after the import to fix config issues.
        - drush -r $TUGBOAT_ROOT cache:rebuild
        # Create a temp admin account
        - drush -y user:create tugboat
        - drush -y user:role:add administrator tugboat
        - drush -y user:password tugboat tugboat
        # Store uses email rather than name for login, so we need to set it too
        - drush sqlq "UPDATE users_field_data SET init='tugboat@example.com',mail='tugboat@example.com' where name = 'tugboat';"

      # Commands that build the site. This is where you would add things
      # like config imports or any other drush commands required to
      # set up or configure the site. When a preview is built from a
      # base preview, the build workflow starts here, skipping the init
      # and update steps, because the results of those are inherited
      # from the base preview.
      build:

        # Run composer install again cuz branch may include new stuff.
        - composer install

        # Build theme
        # HACK: remove node_modules before creating it to avoid Tugboat errors
        - rm -rf $TUGBOAT_ROOT/web/themes/custom/samhsa_pep_uswds/node_modules
        - cd $TUGBOAT_ROOT/web/themes/custom/samhsa_pep_uswds/ && npm install && gulp build

        # Drupal DB updates in case any modules were updated
        - drush -y -r $TUGBOAT_ROOT updb

        # Clear Drupal cache
        - drush -r $TUGBOAT_ROOT cache:rebuild

        # Import config (twice to verify and to apply new config-split changes)
        - drush -y -r $TUGBOAT_ROOT config:import
        - drush -y -r $TUGBOAT_ROOT config:import

    # Enable visual diff tests on Tugboat
    # @todo list of URLs to test
    urls:
      # Create visual diffs of the these URLs using the default options
      - /


  # What to call the service hosting MySQL. This name also acts as the
  # hostname to access the service by from the php service.
  mysql:
    # Use the latest available 5.x version of MySQL
    image: tugboatqa/mysql:5

    commands:
      init:
        # SAMHSA_STORE: Increase the max packet size to avoid "server has gone away" errors.
        - mysql -e "SET GLOBAL max_allowed_packet=536870912;"
        - printf "\n[mysqld]\nmax_allowed_packet=536870912\n" >> /etc/mysql/conf.d/tugboat.cnf

  phpmyadmin:
    expose: 80
    image: phpmyadmin/phpmyadmin
