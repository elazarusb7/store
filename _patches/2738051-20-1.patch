diff --git a/core/modules/views/src/Plugin/views/cache/CachePluginBase.php b/core/modules/views/src/Plugin/views/cache/CachePluginBase.php
index 280ccf4d16..0274e8a03b 100644
--- a/core/modules/views/src/Plugin/views/cache/CachePluginBase.php
+++ b/core/modules/views/src/Plugin/views/cache/CachePluginBase.php
@@ -285,8 +285,10 @@ protected function prepareViewResult(array $result) {
     // original result rows intact.
     foreach ($result as $key => $row) {
       $clone = clone $row;
-      $clone->resetEntityData();
-      $return[$key] = $clone;
+      if ($clone && $clone instanceof ResultRow) {
+        $clone->resetEntityData();
+        $return[$key] = $clone;
+      }
     }
 
     return $return;
@@ -314,7 +316,7 @@ public function getRowCacheTags(ResultRow $row) {
     $tags = !empty($row->_entity) ? $row->_entity->getCacheTags() : [];
 
     if (!empty($row->_relationship_entities)) {
-      foreach ($row->_relationship_entities as $entity) {
+      foreach (array_filter($row->_relationship_entities) as $entity) {
         $tags = Cache::mergeTags($tags, $entity->getCacheTags());
       }
     }
diff --git a/core/modules/views/src/Plugin/views/query/Sql.php b/core/modules/views/src/Plugin/views/query/Sql.php
index 03749a329b..3b9495e6ea 100644
--- a/core/modules/views/src/Plugin/views/query/Sql.php
+++ b/core/modules/views/src/Plugin/views/query/Sql.php
@@ -8,6 +8,8 @@
 use Drupal\Core\Database\Query\Condition;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Logger\LoggerChannel;
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\views\Plugin\views\display\DisplayPluginBase;
 use Drupal\Core\Database\DatabaseExceptionWrapper;
@@ -32,7 +34,8 @@
 class Sql extends QueryPluginBase {
 
   /**
-   * A list of tables in the order they should be added, keyed by alias.
+   * A list of
+    tables in the order they should be added, keyed by alias.
    */
   protected $tableQueue = [];
 
@@ -138,6 +141,13 @@ class Sql extends QueryPluginBase {
    */
   protected $messenger;
 
+  /**
+   * The views logger channel.
+   *
+   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   */
+  protected $logger;
+
   /**
    * Constructs a Sql object.
    *
@@ -153,13 +163,20 @@ class Sql extends QueryPluginBase {
    *   The database-specific date handler.
    * @param \Drupal\Core\Messenger\MessengerInterface $messenger
    *   The messenger.
+   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   *   The views logger channel.
    */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, DateSqlInterface $date_sql, MessengerInterface $messenger) {
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, DateSqlInterface $date_sql, MessengerInterface $messenger, LoggerChannelInterface $logger = NULL) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
 
     $this->entityTypeManager = $entity_type_manager;
     $this->dateSql = $date_sql;
     $this->messenger = $messenger;
+    if (!$logger) {
+      @trigger_error('Calling Sql::__construct() with the $logger argument is supported in drupal:8.7.0 and will be required before drupal:9.0.0.', E_USER_DEPRECATED);
+      $logger = \Drupal::service('logger.channel.views');
+    }
+    $this->logger = $logger;
   }
 
   /**
@@ -172,7 +189,8 @@ public static function create(ContainerInterface $container, array $configuratio
       $plugin_definition,
       $container->get('entity_type.manager'),
       $container->get('views.date_sql'),
-      $container->get('messenger')
+      $container->get('messenger'),
+      $container->get('logger.channel.views')
     );
   }
 
@@ -1652,7 +1670,20 @@ protected function assignEntitiesToResult($ids, array $entities, array $results)
           $entity = $entities[$id];
         }
         else {
-          $entity = NULL;
+          // If main entity failed to load then this is either a race condition
+          // where the entity was deleted since the query was executed or the
+          // database is inconsistent. Drop that row and log an error.
+          if ($relationship_id == 'none') {
+            $this->logger->warning('Failed to load entity @id for view @view. If this warning persists then it indicates that the database has inconsistent entity data.', [
+              '@id' => $id,
+              '@view' => $this->view->id(),
+            ]);
+            unset($results[$index]);
+            break;
+          }
+          else {
+            $entity = NULL;
+          }
         }
 
         if ($relationship_id == 'none') {
@@ -1674,7 +1705,12 @@ public function getCacheTags() {
     // Add cache tags for each row, if there is an entity associated with it.
     if (!$this->hasAggregate) {
       foreach ($this->getAllEntities() as $entity) {
-        $tags = Cache::mergeTags($entity->getCacheTags(), $tags);
+        $entity_cache_tags = [];
+        if ($entity && $entity->getCacheTags()) {
+          $entity_cache_tags = $entity->getCacheTags();
+        }
+
+        $tags = Cache::mergeTags($entity_cache_tags, $tags);
       }
     }
 
@@ -1709,7 +1745,7 @@ protected function getAllEntities() {
       }
     }
 
-    return $entities;
+    return array_filter($entities);
   }
 
   public function addSignature(ViewExecutable $view) {
diff --git a/core/modules/views/tests/src/Unit/Plugin/query/SqlTest.php b/core/modules/views/tests/src/Unit/Plugin/query/SqlTest.php
index 60e11f21c9..4f514a86bc 100644
--- a/core/modules/views/tests/src/Unit/Plugin/query/SqlTest.php
+++ b/core/modules/views/tests/src/Unit/Plugin/query/SqlTest.php
@@ -6,6 +6,7 @@
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityType;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\views\Plugin\views\query\DateSqlInterface;
@@ -33,8 +34,9 @@ public function testGetCacheTags() {
     $entity_type_manager = $this->prophesize(EntityTypeManagerInterface::class);
     $date_sql = $this->prophesize(DateSqlInterface::class);
     $messenger = $this->prophesize(MessengerInterface::class);
+    $logger = $this->prophesize(LoggerChannelInterface::class);
 
-    $query = new Sql([], 'sql', [], $entity_type_manager->reveal(), $date_sql->reveal(), $messenger->reveal());
+    $query = new Sql([], 'sql', [], $entity_type_manager->reveal(), $date_sql->reveal(), $messenger->reveal(), $logger->reveal());
     $query->view = $view;
 
     $result = [];
@@ -81,8 +83,9 @@ public function testGetCacheMaxAge() {
     $entity_type_manager = $this->prophesize(EntityTypeManagerInterface::class);
     $date_sql = $this->prophesize(DateSqlInterface::class);
     $messenger = $this->prophesize(MessengerInterface::class);
+    $logger = $this->prophesize(LoggerChannelInterface::class);
 
-    $query = new Sql([], 'sql', [], $entity_type_manager->reveal(), $date_sql->reveal(), $messenger->reveal());
+    $query = new Sql([], 'sql', [], $entity_type_manager->reveal(), $date_sql->reveal(), $messenger->reveal(), $logger->reveal());
     $query->view = $view;
 
     $view->result = [];
@@ -257,8 +260,9 @@ public function testLoadEntitiesWithEmptyResult() {
     $entity_type_manager = $this->setupEntityTypes();
     $date_sql = $this->prophesize(DateSqlInterface::class);
     $messenger = $this->prophesize(MessengerInterface::class);
+    $logger = $this->prophesize(LoggerChannelInterface::class);
 
-    $query = new Sql([], 'sql', [], $entity_type_manager->reveal(), $date_sql->reveal(), $messenger->reveal());
+    $query = new Sql([], 'sql', [], $entity_type_manager->reveal(), $date_sql->reveal(), $messenger->reveal(), $logger->reveal());
     $query->view = $view;
 
     $result = [];
@@ -287,8 +291,9 @@ public function testLoadEntitiesWithNoRelationshipAndNoRevision() {
     $entity_type_manager = $this->setupEntityTypes($entities);
     $date_sql = $this->prophesize(DateSqlInterface::class);
     $messenger = $this->prophesize(MessengerInterface::class);
+    $logger = $this->prophesize(LoggerChannelInterface::class);
 
-    $query = new Sql([], 'sql', [], $entity_type_manager->reveal(), $date_sql->reveal(), $messenger->reveal());
+    $query = new Sql([], 'sql', [], $entity_type_manager->reveal(), $date_sql->reveal(), $messenger->reveal(), $logger->reveal());
     $query->view = $view;
 
     $result = [];
@@ -312,6 +317,103 @@ public function testLoadEntitiesWithNoRelationshipAndNoRevision() {
     $this->assertSame($entities['first'][2], $result[2]->_entity);
   }
 
+
+  /**
+   * @covers ::loadEntities
+   * @covers ::assignEntitiesToResult
+   */
+  public function testLoadEntitiesWithMissingEntity() {
+    $view = $this->prophesize(ViewExecutable::class)->reveal();
+    $view_entity = $this->prophesize(ViewEntityInterface::class);
+    $view_entity->get('base_table')->willReturn('entity_first');
+    $view_entity->get('base_field')->willReturn('id');
+    $view_entity->id()->willReturn('test');
+    $view->storage = $view_entity->reveal();
+
+    $entities = [
+      'first' => [
+        2 => $this->prophesize(EntityInterface::class)->reveal(),
+      ],
+    ];
+
+    $entity_type_manager = $this->prophesize(EntityTypeManagerInterface::class);
+    $entity_type0 = new EntityType([
+      'label' => 'First',
+      'id' => 'first',
+      'base_table' => 'entity_first',
+      'revision_table' => 'entity_first__revision',
+      'entity_keys' => [
+        'id' => 'id',
+        'revision' => 'vid',
+      ],
+    ]);
+
+    $entity_type_manager->getDefinitions()->willReturn([
+      'first' => $entity_type0,
+      'base_table' => 'entity_second',
+    ]);
+
+    $entity_type_manager->getDefinition('first')->willReturn($entity_type0);
+
+    // Setup the views data corresponding to the entity types.
+    $views_data = $this->prophesize(ViewsData::class);
+    $views_data->get('entity_first')->willReturn([
+      'table' => [
+        'entity type' => 'first',
+        'entity revision' => FALSE,
+      ],
+    ]);
+    $views_data->get('entity_first__revision')->willReturn([
+      'table' => [
+        'entity type' => 'first',
+        'entity revision' => TRUE,
+      ],
+    ]);
+    $this->setupViewsData($views_data->reveal());
+
+    // Setup the loading of entities and entity revisions.
+    $entity_storage = $this->prophesize(EntityStorageInterface::class);
+    $entity_storage->load(1)->willReturn(NULL);
+    $entity_storage->load(2)->willReturn($entities['first'][2]);
+    $entity_storage->loadMultiple([1, 2])->willReturn($entities['first']);
+
+    $entity_type_manager->getStorage('first')->willReturn($entity_storage);
+
+    $this->setupEntityTypeManager($entity_type_manager->reveal());
+
+    $date_sql = $this->prophesize(DateSqlInterface::class);
+    $messenger = $this->prophesize(MessengerInterface::class);
+    $logger = $this->prophesize(LoggerChannelInterface::class);
+    $logger->warning('Failed to load entity @id for view @view. If this warning persists then it indicates that the database has inconsistent entity data.', [
+      '@id' => 1,
+      '@view' => 'test',
+    ]);
+
+    $query = new Sql([], 'sql', [], $entity_type_manager->reveal(), $date_sql->reveal(), $messenger->reveal(), $logger->reveal());
+    $query->view = $view;
+
+    $result = [];
+    $result[] = new ResultRow([
+      'id' => 1,
+    ]);
+    // Note: Let the same entity be returned multiple times, for example to
+    // support the translation usecase.
+    $result[] = new ResultRow([
+      'id' => 2,
+    ]);
+    $result[] = new ResultRow([
+      'id' => 2,
+    ]);
+
+    $query->addField('entity_first', 'id', 'id');
+    $query->loadEntities($result);
+
+    $this->assertCount(2, $result);
+    $this->assertFalse(isset($result[0]));
+    $this->assertSame($entities['first'][2], $result[1]->_entity);
+    $this->assertSame($entities['first'][2], $result[2]->_entity);
+  }
+
   /**
    * Create a view with a relationship.
    */
@@ -352,8 +454,9 @@ public function testLoadEntitiesWithRelationship() {
     $entity_type_manager = $this->setupEntityTypes($entities);
     $date_sql = $this->prophesize(DateSqlInterface::class);
     $messenger = $this->prophesize(MessengerInterface::class);
+    $logger = $this->prophesize(LoggerChannelInterface::class);
 
-    $query = new Sql([], 'sql', [], $entity_type_manager->reveal(), $date_sql->reveal(), $messenger->reveal());
+    $query = new Sql([], 'sql', [], $entity_type_manager->reveal(), $date_sql->reveal(), $messenger->reveal(), $logger->reveal());
     $query->view = $view;
 
     $result = [];
@@ -408,8 +511,9 @@ public function testLoadEntitiesWithNonEntityRelationship() {
     $entity_type_manager = $this->setupEntityTypes($entities);
     $date_sql = $this->prophesize(DateSqlInterface::class);
     $messenger = $this->prophesize(MessengerInterface::class);
+    $logger = $this->prophesize(LoggerChannelInterface::class);
 
-    $query = new Sql([], 'sql', [], $entity_type_manager->reveal(), $date_sql->reveal(), $messenger->reveal());
+    $query = new Sql([], 'sql', [], $entity_type_manager->reveal(), $date_sql->reveal(), $messenger->reveal(), $logger->reveal());
     $query->view = $view;
 
     $result = [];
@@ -460,8 +564,9 @@ public function testLoadEntitiesWithRevision() {
     $entity_type_manager = $this->setupEntityTypes([], $entity_revisions);
     $date_sql = $this->prophesize(DateSqlInterface::class);
     $messenger = $this->prophesize(MessengerInterface::class);
+    $logger = $this->prophesize(LoggerChannelInterface::class);
 
-    $query = new Sql([], 'sql', [], $entity_type_manager->reveal(), $date_sql->reveal(), $messenger->reveal());
+    $query = new Sql([], 'sql', [], $entity_type_manager->reveal(), $date_sql->reveal(), $messenger->reveal(), $logger->reveal());
     $query->view = $view;
 
     $result = [];
@@ -515,8 +620,9 @@ public function testLoadEntitiesWithRevisionOfSameEntityType() {
     $entity_type_manager = $this->setupEntityTypes($entity, $entity_revisions);
     $date_sql = $this->prophesize(DateSqlInterface::class);
     $messenger = $this->prophesize(MessengerInterface::class);
+    $logger = $this->prophesize(LoggerChannelInterface::class);
 
-    $query = new Sql([], 'sql', [], $entity_type_manager->reveal(), $date_sql->reveal(), $messenger->reveal());
+    $query = new Sql([], 'sql', [], $entity_type_manager->reveal(), $date_sql->reveal(), $messenger->reveal(), $logger->reveal());
     $query->view = $view;
 
     $result = [];
@@ -574,8 +680,9 @@ public function testLoadEntitiesWithRelationshipAndRevision() {
     $entity_type_manager = $this->setupEntityTypes($entities, $entity_revisions);
     $date_sql = $this->prophesize(DateSqlInterface::class);
     $messenger = $this->prophesize(MessengerInterface::class);
+    $logger = $this->prophesize(LoggerChannelInterface::class);
 
-    $query = new Sql([], 'sql', [], $entity_type_manager->reveal(), $date_sql->reveal(), $messenger->reveal());
+    $query = new Sql([], 'sql', [], $entity_type_manager->reveal(), $date_sql->reveal(), $messenger->reveal(), $logger->reveal());
     $query->view = $view;
 
     $result = [];
diff --git a/core/modules/views/views.services.yml b/core/modules/views/views.services.yml
index ffed39460f..a54189a40f 100644
--- a/core/modules/views/views.services.yml
+++ b/core/modules/views/views.services.yml
@@ -93,3 +93,6 @@ services:
     class: Drupal\views\Plugin\views\query\SqliteDateSql
     arguments: ['@database']
     public: false
+  logger.channel.views:
+    parent: logger.channel_base
+    arguments: ['views']
