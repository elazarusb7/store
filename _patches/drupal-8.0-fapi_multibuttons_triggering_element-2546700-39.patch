 core/lib/Drupal/Core/Form/FormBuilder.php          | 17 ++++++++++-
 .../Drupal/Tests/Core/Form/FormBuilderTest.php     | 34 ++++++++++++++++++++++
 2 files changed, 50 insertions(+), 1 deletion(-)

diff --git a/core/lib/Drupal/Core/Form/FormBuilder.php b/core/lib/Drupal/Core/Form/FormBuilder.php
index 4d1dc27f71..a72fd3022d 100644
--- a/core/lib/Drupal/Core/Form/FormBuilder.php
+++ b/core/lib/Drupal/Core/Form/FormBuilder.php
@@ -1099,7 +1099,22 @@ public function doBuildForm($form_id, &$element, FormStateInterface &$form_state
       // been identified yet, default it to the first button.
       $buttons = $form_state->getButtons();
       if (!$form_state->isProgrammed() && !$form_state->getTriggeringElement() && !empty($buttons)) {
-        $form_state->setTriggeringElement($buttons[0]);
+        $triggering_element = $buttons[0];
+        // If there was no specific triggering button detected by an element
+        // value, try to find a triggering element by name in the user input.
+        $input = $form_state->getUserInput();
+        foreach ($buttons as $button_element) {
+         if (isset($button_element['#name'])) {
+            // Try to find an ajax-submitted element by name matched to _triggering_element_name.
+            if ((!empty($input['_triggering_element_name']) && $button_element['#name'] == $input['_triggering_element_name'])
+              // Or lookup for a non-empty value in the user input by element name.
+              || (!empty($input[$button_element['#name']]))) {
+              $triggering_element = $button_element;
+              break;
+            }
+          }
+        }
+        $form_state->setTriggeringElement($triggering_element);
       }
 
       $triggering_element = $form_state->getTriggeringElement();
diff --git a/core/tests/Drupal/Tests/Core/Form/FormBuilderTest.php b/core/tests/Drupal/Tests/Core/Form/FormBuilderTest.php
index a21ec29b98..da61e4ab61 100644
--- a/core/tests/Drupal/Tests/Core/Form/FormBuilderTest.php
+++ b/core/tests/Drupal/Tests/Core/Form/FormBuilderTest.php
@@ -338,6 +338,40 @@ public function providerTestBuildFormWithTriggeringElement() {
     ];
   }
 
+  /**
+   * Tests if a client-side altered triggering element is correctly identified.
+   *
+   * When the label of the submit button was changed client-side (For instance
+   * by Ajax or a DropButton element) Drupal should still attempt to resolve the
+   * item by its unique name.
+   */
+  public function testBuildFormWithAjaxTriggeringElement() {
+    $form_id = 'test_form_id';
+    $expected_form = $form_id();
+
+    // Duplicate the submit button.
+    $expected_form['actions']['other_submit'] = $expected_form['actions']['submit'];
+    // Give them unique names.
+    $expected_form['actions']['submit']['#name'] = 'first_submit';
+    $expected_form['actions']['other_submit']['#name'] = 'second_submit';
+    // Give them unique payloads to check by.
+    $expected_form['actions']['submit']['#payload'] = '1';
+    $expected_form['actions']['other_submit']['#payload'] = '2';
+
+    $form_arg = $this->getMockForm($form_id, $expected_form, 2);
+    $form_state = new FormState();
+    $form_state->setProcessInput();
+    $form_state->setUserInput([
+      'form_id' => $form_id,
+      // Give the button another value (label) during submit.
+      $expected_form['actions']['other_submit']['#name'] => 'client-side altered label',
+    ]);
+    $this->request->setMethod('POST');
+    $this->formBuilder->buildForm($form_arg, $form_state);
+
+    $this->assertEquals($expected_form['actions']['other_submit']['#payload'], $form_state->getTriggeringElement()['#payload']);
+  }
+
   /**
    * Tests the rebuildForm() method for a POST submission.
    */
