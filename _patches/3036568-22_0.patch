diff --git a/modules/product/src/Entity/ProductVariation.php b/modules/product/src/Entity/ProductVariation.php
index 1ffb2b0c..5f5a6f17 100644
--- a/modules/product/src/Entity/ProductVariation.php
+++ b/modules/product/src/Entity/ProductVariation.php
@@ -13,6 +13,7 @@ use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Url;
 use Drupal\user\UserInterface;
+use Symfony\Component\Routing\Exception\RouteNotFoundException;
 
 /**
  * Defines the product variation entity class.
@@ -103,6 +104,26 @@ class ProductVariation extends CommerceContentEntityBase implements ProductVaria
    * {@inheritdoc}
    */
   public function toUrl($rel = 'canonical', array $options = []) {
+    // If the parent product reference is lost, we have no way of generating
+    // URLs for these routes.
+    $requires_product_routes = [
+      'add-form',
+      'edit-form',
+      'duplicate-form',
+      'delete-form',
+      'collection',
+      'drupal:content-translation-overview',
+      'drupal:content-translation-add',
+      'drupal:content-translation-edit',
+      'drupal:content-translation-delete',
+    ];
+    if (in_array($rel, $requires_product_routes) && !$this->getProductId()) {
+      // Throw a RouteNotFoundException so that ::uriRelationships will just
+      // filter it out, which in turn will avoid creating exceptions when trying
+      // to delete a variation.
+      // @see https://www.drupal.org/project/commerce/issues/3036568.
+      throw new RouteNotFoundException();
+    }
     // StringFormatter assumes 'revision' is always a valid link template.
     if (in_array($rel, ['canonical', 'revision'])) {
       $route_name = 'entity.commerce_product.canonical';
diff --git a/modules/product/tests/src/Kernel/ProductVariationMenuLinkTest.php b/modules/product/tests/src/Kernel/ProductVariationMenuLinkTest.php
new file mode 100644
index 00000000..df1cb7a2
--- /dev/null
+++ b/modules/product/tests/src/Kernel/ProductVariationMenuLinkTest.php
@@ -0,0 +1,61 @@
+<?php
+
+namespace Drupal\Tests\commerce_product\Kernel;
+
+use Drupal\Tests\commerce\Kernel\CommerceKernelTestBase;
+
+/**
+ * Tests the product variation storage.
+ *
+ * @group commerce
+ */
+class ProductVariationMenuLinkTest extends CommerceKernelTestBase {
+
+  /**
+   * The product variation storage.
+   *
+   * @var \Drupal\commerce_product\ProductVariationStorageInterface
+   */
+  protected $variationStorage;
+
+  /**
+   * {@inheritdoc}
+   */
+  public static $modules = [
+    'path',
+    'commerce_product',
+    // The module menu_link_content calls the function
+    // menu_link_content_entity_predelete which we want to make sure does not
+    // crash things.
+    'menu_link_content',
+  ];
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp() {
+    parent::setUp();
+
+    $this->installEntitySchema('commerce_product_variation');
+    $this->installEntitySchema('commerce_product');
+    $this->installConfig(['commerce_product']);
+
+    $this->variationStorage = $this->container->get('entity_type.manager')->getStorage('commerce_product_variation');
+  }
+
+  /**
+   * Tests that a variation can be deleted even if it has no parent product.
+   *
+   * @see https://www.drupal.org/project/commerce/issues/3036568
+   */
+  public function testDeleteOrphan() {
+    $variation = $this->variationStorage->create([
+      'type' => 'default',
+      'sku' => strtolower($this->randomMachineName()),
+      'title' => $this->randomString(),
+    ]);
+    $variation->save();
+    $variation->delete();
+  }
+
+}
